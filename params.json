{
  "name": "Tutoriel-fullstack-js-3-handlebars",
  "tagline": "Tutoriel Fullstack JavaScript - Chapitre 3 - Handlebars",
  "body": "# Handlebars\r\n\r\nDans le chapitre précedent, la vue de notre application était une chaîne de caractères HTML créée à l'intérieur du script ```vue-a-faire.js```. Le problème avec cette approche est un mélange de HTML et de javacript qui peut devenir illisible pour des applications plus complexes. Nous allons maintenant séparer les deux à l'aide d'une libraire \"patron\" (\"templating engine\" en anglais). Pour cet exercice j'ai choisi [handlebars](http://handlebarsjs.com/).\r\n\r\n## Mise en place\r\n\r\nNous allons réutiliser le modèle et les controleurs du chapitre précédent et ne changer que la vue. \r\n\r\nCréez un nouveau dossier ```3.handlebars```, copiez le contenu du dossier ```2.vanilla``` du [chapitre 2](link_to_do) et ouvrez le fichier ```package.json``` pour en modifier le nom.\r\n\r\n```\r\n{\r\n  \"name\": \"handlebars\", // <-- modifié\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"main.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"browserify main.js -o public/script.js | minify public/script.js -o public/script.js\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\"\r\n}\r\n```\r\n\r\nDans ```public/index.html``` changer le titre.\r\n\r\n```\r\n<title>Handlebars</title>\r\n```\r\n\r\nNous allons aussi télécharger ```handlebars``` ainsi que le module ```browserify-handlebars``` avec NPM. Ouvrez le terminal dans le dossier du projet.\r\n\r\n```\r\n$ cd ~/Desktop/3.handlebars\r\n$ npm install handlebars browserify-handlebars --save\r\n```\r\n\r\nDans le dossier ```lib``` créez un nouveau dossier ```vue-a-faire``` où nous allons ajouter la nouvelle vue.\r\n\r\n## Vue handlebars\r\n\r\nDans ```lib/vue-a-faire```, créez un fichier ```liste.handlebars```.\r\n\r\n```\r\n{{#each data}}\r\n<div\r\n {{#if fait}} class=\"liste-element fait\"\r\n {{else}} class=\"liste-element a-faire\"\r\n {{/if}}\r\n >\r\n <div class=\"liste-element-info\">\r\n  <div class=\"liste-element-texte\">\r\n   <p>{{text}}</p>\r\n  </div>\r\n  <div class=\"liste-element-modif\">\r\n   <span class=\"glyphicon glyphicon-pencil\"></span>\r\n  </div>\r\n  <div class=\"liste-element-statut\">\r\n   <span\r\n    {{#if fait}} class=\"glyphicon glyphicon-remove\"\r\n    {{else}} class=\"glyphicon glyphicon-ok\"\r\n    {{/if}}\r\n   ></span>\r\n  </div>\r\n </div>\r\n\r\n {{#if maj}}\r\n <div class=\"liste-element-maj\">\r\n  <div class=\"liste-element-maj-input\">\r\n   <input class=\"form-control\" id=\"liste-element-maj-input\" type=\"text\">\r\n  </div>\r\n  <div class=\"liste-element-maj-bouton\">\r\n   <button class=\"btn btn-primary\" id=\"liste-element-maj-bouton\">OK</button>\r\n  </div>\r\n </div>\r\n {{/if}}\r\n\r\n</div>\r\n{{/each}}\r\n```\r\n\r\nNous avons ici repris le HTML d'un élément de la liste de choses à faire qui, comme nous l'avons vu dans le chapitre précédent, sera représenté différemment selon qu'il soit marqué comme ```fait``` ou non et selon qu'il soit en cours de modification ou pas.\r\n\r\n### Sémantique handlebars\r\n\r\nLes balises handlebars sont représentées par les caractères ```{{``` et ```}}```.\r\n\r\n#### Boucle\r\n\r\n```\r\n{{#each data}}\r\n\r\n // HTML de chaque objet du dictionnaire \"data\"\r\n\r\n{{/each}}\r\n```\r\n\r\nPour chaque objet du dictionnaire ```data```, handlebars va créer le HTML entre les balises ```each```.\r\n\r\n#### Condition\r\n\r\nDans handlebars une condition est exprimée par la balise ```{{#if}}```.\r\n\r\nDans notre example:\r\n\r\n```\r\n<div\r\n {{#if fait}} class=\"liste-element fait\"\r\n {{else}} class=\"liste-element a-faire\"\r\n {{/if}}\r\n >\r\n```\r\n\r\nSi l'objet du dictionnaire ```data``` est ```fait``` la ```<div>``` aura les classes ```liste-element``` et ```fait```. Sinon (```{{else}}```), elle aura les classes ```liste-element``` et ```a-faire```.\r\n\r\nDe la même manière le ```<span>``` dans ```<div class=\"liste-element-statut\">``` aura différentes classes dépendant de ce que l'objet soit ```fait``` ou non.\r\n\r\nLe conditionnel peut aussi être utilisé pour montrer ou non un bloque de code HTML. Dans notre exemple, la partie ```<div class=\"liste-element-maj\">``` est montrée si l'objet est en cours de modification.\r\n\r\n#### Insérer une chaîne caractère du modèle\r\n\r\nNous insérons le ```text``` de l'objet en utilisant les balises handlebars. Dans notre exemple:\r\n\r\n```\r\n<p>{{text}}</p>\r\n```\r\n\r\n### Intégrer la vue dans notre application\r\n\r\nOuvrez le fichier ```lib/vue-a-faire.js```. Vous pouvez effacer la fonction ```creerHtmlElement()``` puisque le patron handlebars se chargera de cette partie. Nous allons garder la fonction ```creerHtml()``` mais la réécrire, effacez son contenu.\r\n\r\nLe fichier ressemble maintenant à ça:\r\n\r\n```\r\nmodule.exports = function(modele) {\r\n document.getElementById('liste').innerHTML = creerHtml(modele)\r\n}\r\n\r\nfunction creerHtml(modele) {\r\n\r\n}\r\n```\r\n\r\nEn haut de page, créez un lien vers le patron ```liste.handlebars```.\r\n\r\n```\r\nvar liste = require('./vue-a-faire/liste.handlebars')\r\n```\r\n\r\nÀ l'intérieur de la fonction ```creerHtml()``` nous allons passer le dictionnaire ```data``` du modèle à la vue ```liste``` et renvoyer le HTML ainsi créé.\r\n\r\n```\r\nvar liste = require('./vue/liste.handlebars')\r\n\r\nmodule.exports = function(modele) {\r\n document.getElementById('liste').innerHTML = creerHtml(modele)\r\n}\r\n\r\nfunction creerHtml(modele) {\r\n var html =  liste({data: modele.data})\r\n return html\r\n}\r\n```\r\n\r\n### Transformer la vue avec browserify\r\n\r\n```browserify``` combine les fichiers javascript en un seul fichier qui sera téléchargez avec le fichier HTML. Notre vue ```liste.handlebars``` n'étant pas écrite en javascript nous devons utiliser une transformation ```browserify```. C'est la librairie ```browserify-handlebars``` que nous avons téléchargée tout à l'heure.\r\n\r\nOuvrez ```package.json``` et modifiez le script ```build``` en ajoutant ```-t browserify-handlebars``` pour qu'il utilise la transformation:\r\n\r\n```\r\n{\r\n  \"name\": \"handlebars\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"browserify main.js -o public/script.js -t browserify-handlebars | minify public/script.js -o public/script.js\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\"\r\n}\r\n```\r\n\r\nVous pouvez maintenant mettre à jour ```script.js``` dans le dossier ```public``` en ouvrant un terminal pour lancer le script ```build```.\r\n\r\n```\r\n$ npm run build\r\n```\r\n\r\nOuvrez ```public/index.html``` dans le navigateur.\r\n\r\n## Conclusion\r\n\r\nNous avons utilisé un script externe pour un rendu de la vue plus propre. Il existe beaucoup d'alternatives à handlebars que vous pouvez trouver par une simple [recherche sur internet](https://www.google.fr/#q=template+engine+javascript+frontend).\r\n\r\nDans le [prochain chapitre](link_to_do) nous allons créer des composants qui englode vue et controleurs.\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}